name: CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  AWS_REGION: us-east-1
  ECR_REPOSITORY_FRONTEND: frontend
  ECR_REPOSITORY_BACKEND: backend
  ECS_CLUSTER: complete-pipeline-cluster
  ECS_SERVICE_FRONTEND: frontend-service
  ECS_SERVICE_BACKEND: backend-service

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        app: [frontend, backend]
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: src/${{ matrix.app }}/package-lock.json
    
    - name: Install dependencies
      run: |
        cd src/${{ matrix.app }}
        npm ci
    
    - name: Run tests
      run: |
        cd src/${{ matrix.app }}
        npm test

  build-and-push:
    needs: test
    runs-on: ubuntu-latest
    strategy:
      matrix:
        app: [frontend, backend]
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}
    
    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1
    
    - name: Build and push Docker image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        cd src/${{ matrix.app }}
        docker build -t $ECR_REGISTRY/${{ matrix.app == 'frontend' && env.ECR_REPOSITORY_FRONTEND || env.ECR_REPOSITORY_BACKEND }}:$IMAGE_TAG .
        docker push $ECR_REGISTRY/${{ matrix.app == 'frontend' && env.ECR_REPOSITORY_FRONTEND || env.ECR_REPOSITORY_BACKEND }}:$IMAGE_TAG

  deploy:
    needs: build-and-push
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}
    
    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1
    
    - name: Download task definition
      run: |
        aws ecs describe-task-definition --task-definition complete-pipeline-frontend --query taskDefinition > frontend-task-def.json
        aws ecs describe-task-definition --task-definition complete-pipeline-backend --query taskDefinition > backend-task-def.json
    
    - name: Fill in the new image ID in the Amazon ECS task definition
      id: task-def-frontend
      uses: aws-actions/amazon-ecs-render-task-definition@v1
      with:
        task-definition: frontend-task-def.json
        container-name: complete-pipeline-frontend
        image: ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY_FRONTEND }}:${{ github.sha }}
    
    - name: Fill in the new image ID in the Amazon ECS task definition
      id: task-def-backend
      uses: aws-actions/amazon-ecs-render-task-definition@v1
      with:
        task-definition: backend-task-def.json
        container-name: complete-pipeline-backend
        image: ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY_BACKEND }}:${{ github.sha }}
    
    - name: Deploy Amazon ECS task definition
      uses: aws-actions/amazon-ecs-deploy-task-definition@v1
      with:
        task-definition: ${{ steps.task-def-frontend.outputs.task-definition }}
        service: ${{ env.ECS_SERVICE_FRONTEND }}
        cluster: ${{ env.ECS_CLUSTER }}
        wait-for-service-stability: true
    
    - name: Deploy Amazon ECS task definition
      uses: aws-actions/amazon-ecs-deploy-task-definition@v1
      with:
        task-definition: ${{ steps.task-def-backend.outputs.task-definition }}
        service: ${{ env.ECS_SERVICE_BACKEND }}
        cluster: ${{ env.ECS_CLUSTER }}
        wait-for-service-stability: true

  terraform:
    needs: deploy
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}
    
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v2
    
    - name: Terraform Init
      run: |
        cd terraform
        terraform init
    
    - name: Terraform Plan
      run: |
        cd terraform
        terraform plan \
          -var-file="environments/dev.tfvars" \
          -var="backend_image=489585378121.dkr.ecr.us-east-1.amazonaws.com/backend:${{ github.sha }}" \
          -var="frontend_image=489585378121.dkr.ecr.us-east-1.amazonaws.com/frontend:${{ github.sha }}" \
          -out=tfplan
    
    - name: Terraform Apply
      if: github.ref == 'refs/heads/main'
      run: |
        cd terraform
        terraform apply -auto-approve tfplan 